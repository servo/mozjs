# Full list is tracked through meta bug 793882

####################
#  Intended leaks  #
####################

{
   PR_SetEnv requires its argument to be leaked, but does not appear on stacks. (See bug 793534.)
   Memcheck:Leak
   ...
   fun:_ZN7mozilla9SaveToEnvEPKc
   ...
}
{
   PR_SetEnv requires its argument to be leaked, but does not appear on stacks. (See bug 793534.)
   Memcheck:Leak
   ...
   fun:SaveToEnv
   ...
}
{
   PR_SetEnv requires its argument to be leaked, but does not appear on stacks. (See bug 793549.)
   Memcheck:Leak
   ...
   fun:_ZL13SaveWordToEnvPKcRK12nsTSubstringIcE
   ...
}
{
   PR_SetEnv requires its argument to be leaked, but does not appear on stacks. (See bug 793549.)
   Memcheck:Leak
   ...
   fun:SaveWordToEnv
   ...
}
{
   PR_SetEnv requires its argument to be leaked, but does not appear on stacks. (See bug 944133.)
   Memcheck:Leak
   ...
   fun:_ZN13CrashReporter14SetRestartArgsEiPPc
   ...
}
{
   PR_SetEnv requires its argument to be leaked, but does not appear on stacks. (See bug 793548.)
   Memcheck:Leak
   fun:malloc
   ...
   fun:_Z12ToNewCStringRK10nsACString
   fun:_ZN13CrashReporter14SetupExtraDataEP7nsIFileRK10nsACString
   ...
}
{
   PR_SetEnv requires its argument to be leaked, but does not appear on stacks. (See bug 1345153.)
   Memcheck:Leak
   fun:malloc
   ...
   fun:_ZN13CrashReporterL27SetupCrashReporterDirectoryEP7nsIFilePKcS3_PS1_
   ...
}
{
   We purposely leak the StatisticsReporter object
   Memcheck:Leak
   fun:malloc
   fun:moz_xmalloc
   fun:operator new
   fun:_Z21XRE_CreateStatsObjectv
   ...
}
{
   We purposely leak copies of the initial argv/environ to implement setproctitle on Linux. (See bug 1878213.)
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:strdup
   fun:_Z17setproctitle_initPPc
   ...
}
{
   Leak of argv (bug 1925274)
   Memcheck:Leak
   match-leak-kinds: definite
   ...
   fun:ForkedChildProcessInit
   ...
}

####################################
#  Leaks in third party libraries  #
####################################

{
   See bug 793535
   Memcheck:Leak
   fun:calloc
   fun:_dlerror_run
   fun:dlsym
   ...
}
{
   See bug 793611
   Memcheck:Leak
   fun:memalign
   fun:tls_get_addr_tail
   fun:__tls_get_addr
   ...
}
{
   See bug 793611
   Memcheck:Leak
   fun:memalign
   fun:tls_get_addr_tail
   fun:___tls_get_addr
   ...
}

#################
#  Other leaks  #
#################

{
   Bug 794369
   Memcheck:Leak
   fun:malloc
   fun:moz_xmalloc
   ...
   fun:_ZN20mozJSComponentLoader10LoadModuleERN7mozilla12FileLocationE
   ...
}
{
   Bug 794370
   Memcheck:Leak
   fun:malloc
   fun:moz_xmalloc
   ...
   fun:_ZN22nsComponentManagerImpl15RegisterFactoryERK4nsIDPKcS4_P10nsIFactory
   ...
}
{
   Bug 794372
   Memcheck:Leak
   fun:malloc
   fun:moz_xmalloc
   ...
   fun:_ZN22nsComponentManagerImpl22RegisterCIDEntryLockedEPKN7mozilla6Module8CIDEntryEPNS_11KnownModuleE
   ...
}
{
   Bug 794374
   Memcheck:Leak
   fun:malloc
   fun:moz_xmalloc
   ...
   fun:_ZN22nsComponentManagerImpl17ManifestComponentERNS_25ManifestProcessingContextEiPKPc
   ...
}
{
   Bug 1017112
   Memcheck:Leak
   fun:malloc
   ...
   fun:PK11_InitPin
   fun:_ZN11nsPK11Token12InitPasswordEPKDs
   ...
}
{
   We intentionally leak bloom filter TLS data in the global servo thread-pool until we can free it consistently (https://github.com/rayon-rs/rayon/issues/688)
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   ...
   fun:_ZN3std*thread*local*fast*12Key$LT$T$GT$14try_initialize*
   ...
   fun:_ZN5style5bloom19StyleBloom$LT$E$GT$3new*
   ...
}
{
   Same as above, but for rustc >= 1.80
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   ...
   fun:_ZN3std3sys12thread_local10fast_local4lazy20Storage*10initialize*
   ...
   fun:_ZN5style5bloom19StyleBloom$LT$E$GT$3new*
   ...
}
{
   Same as above, but for rustc >= 1.81
   Memcheck:Leak
   match-leak-kinds: definite
   fun:calloc
   ...
   fun:_ZN3std3sys12thread_local6native4lazy20Storage*10initialize*
   ...
   fun:_ZN5style5bloom19StyleBloom$LT$E$GT$3new*
   ...
}
{
   We intentionally leak sharing cache TLS data in the global servo thread-pool until we can free it consistently (https://github.com/rayon-rs/rayon/issues/688)
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:_ZN3std*thread*local*fast*12Key$LT$T$GT$14try_initialize*
   ...
   fun:_ZN5style7sharing26StyleSharingCache$LT$E$GT$3new*
   ...
}
{
   Same as above, but for rustc >= 1.80
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:_ZN3std3sys12thread_local10fast_local4lazy20Storage*10initialize*
   ...
   fun:_ZN5style7sharing26StyleSharingCache$LT$E$GT$3new*
   ...
}
{
   Same as above, but for rustc >= 1.81
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   ...
   fun:_ZN3std3sys12thread_local6native4lazy20Storage*10initialize*
   ...
   fun:_ZN5style7sharing26StyleSharingCache$LT$E$GT$3new*
   ...
}
{
   Leak in libfontconfig1 in Debian 8 and 9. See bug 1636003.
   Memcheck:Leak
   match-leak-kinds: definite
   fun:malloc
   fun:FcGetPrgname
   ...
}

#################
#  Other leaks  #
#################
{
   Following frame pointers can lead us to uninitialized stack space
   Memcheck:Cond
   fun:DoFramePointerStackWalk
}
