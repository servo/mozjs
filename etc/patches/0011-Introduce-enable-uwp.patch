diff --git a/config/external/icu/common/moz.build b/config/external/icu/common/moz.build
index ce1b0d057..7310aca3b 100644
--- a/config/external/icu/common/moz.build
+++ b/config/external/icu/common/moz.build
@@ -8,6 +8,8 @@ Library("icuuc")
 FINAL_LIBRARY = "icu"
 
 DEFINES["U_COMMON_IMPLEMENTATION"] = True
+if CONFIG["JS_ENABLE_UWP"]:
+    DEFINES["U_PLATFORM_HAS_WINUWP_API"] = 1
 
 LOCAL_INCLUDES += ["/intl/icu/source/i18n"]
 
diff --git a/js/moz.configure b/js/moz.configure
index 6c7b4b6f2..fa88f7a6b 100644
--- a/js/moz.configure
+++ b/js/moz.configure
@@ -78,6 +78,18 @@ set_define("JS_64BIT", depends(target)(lambda t: t.bitness == 64 or None))
 set_define("JS_PUNBOX64", depends(target)(lambda t: t.bitness == 64 or None))
 set_define("JS_NUNBOX32", depends(target)(lambda t: t.bitness == 32 or None))
 
+option("--enable-uwp",
+       default=False,
+       help="{Enable|Disable} building for UWP environments")
+
+@depends("--enable-uwp")
+def js_enable_uwp(value):
+    if value:
+        return True
+
+set_config("JS_ENABLE_UWP", js_enable_uwp)
+set_define("JS_ENABLE_UWP", js_enable_uwp)
+
 
 # SpiderMonkey as a shared library, and how its symbols are exported
 # ==================================================================
diff --git a/js/src/builtin/TestingFunctions.cpp b/js/src/builtin/TestingFunctions.cpp
index 0c3995563..3c1ac1b98 100644
--- a/js/src/builtin/TestingFunctions.cpp
+++ b/js/src/builtin/TestingFunctions.cpp
@@ -6925,7 +6925,9 @@ static bool GetTimeZone(JSContext* cx, unsigned argc, Value* vp) {
   auto getTimeZone = [](std::time_t* now) -> const char* {
     std::tm local{};
 #  if defined(_WIN32)
+#ifndef JS_ENABLE_UWP
     _tzset();
+#endif
     if (localtime_s(&local, now) == 0) {
       return _tzname[local.tm_isdst > 0];
     }
@@ -7021,7 +7023,9 @@ static bool SetTimeZone(JSContext* cx, unsigned argc, Value* vp) {
   }
 
 #  if defined(_WIN32)
+#ifndef JS_ENABLE_UWP
   _tzset();
+#endif
 #  else
   tzset();
 #  endif /* _WIN32 */
diff --git a/js/src/ds/MemoryProtectionExceptionHandler.cpp b/js/src/ds/MemoryProtectionExceptionHandler.cpp
index 3c4eb00c3..010316ff9 100644
--- a/js/src/ds/MemoryProtectionExceptionHandler.cpp
+++ b/js/src/ds/MemoryProtectionExceptionHandler.cpp
@@ -110,7 +110,7 @@ static bool sExceptionHandlerInstalled = false;
 static ProtectedRegionTree sProtectedRegions;
 
 bool MemoryProtectionExceptionHandler::isDisabled() {
-#if defined(XP_WIN) && defined(MOZ_ASAN)
+#if defined(XP_WIN) && (defined(MOZ_ASAN) || defined(JS_ENABLE_UWP))
   // Under Windows ASan, WasmFaultHandler registers itself at 'last' priority
   // in order to let ASan's ShadowExceptionHandler stay at 'first' priority.
   // Unfortunately that results in spurious wasm faults passing through the
@@ -175,6 +175,7 @@ static mozilla::Atomic<bool> sHandlingException(false);
 
 static long __stdcall VectoredExceptionHandler(
     EXCEPTION_POINTERS* ExceptionInfo) {
+#ifndef JS_ENABLE_UWP
   EXCEPTION_RECORD* ExceptionRecord = ExceptionInfo->ExceptionRecord;
 
   // We only handle one kind of exception; ignore all others.
@@ -199,6 +200,7 @@ static long __stdcall VectoredExceptionHandler(
       }
     }
   }
+#endif
 
   // Forward to the previous handler which may be a debugger,
   // the crash reporter or something else entirely.
@@ -213,9 +215,11 @@ bool MemoryProtectionExceptionHandler::install() {
     return true;
   }
 
+#ifndef JS_ENABLE_UWP
   // Install our new exception handler.
   sVectoredExceptionHandler = AddVectoredExceptionHandler(
       /* FirstHandler = */ true, VectoredExceptionHandler);
+#endif
 
   sExceptionHandlerInstalled = sVectoredExceptionHandler != nullptr;
   return sExceptionHandlerInstalled;
@@ -225,8 +229,10 @@ void MemoryProtectionExceptionHandler::uninstall() {
   if (sExceptionHandlerInstalled) {
     MOZ_ASSERT(!sHandlingException);
 
+#ifndef JS_ENABLE_UWP
     // Restore the previous exception handler.
     MOZ_ALWAYS_TRUE(RemoveVectoredExceptionHandler(sVectoredExceptionHandler));
+#endif
 
     sExceptionHandlerInstalled = false;
   }
diff --git a/js/src/gc/Memory.cpp b/js/src/gc/Memory.cpp
index d59585f0c..c9f7dd7bc 100644
--- a/js/src/gc/Memory.cpp
+++ b/js/src/gc/Memory.cpp
@@ -898,9 +898,15 @@ void* AllocateMappedContent(int fd, size_t offset, size_t length,
     }
     UnmapInternal(reinterpret_cast<void*>(region), mappedLength);
     // If the offset or length are out of bounds, this call will fail.
+#ifdef JS_ENABLE_UWP
+    map = static_cast<uint8_t*>(
+        MapViewOfFileFromApp(hMap, FILE_MAP_COPY, ((ULONG64)offsetH << 32) | offsetL,
+                             alignedLength));
+#else
     map = static_cast<uint8_t*>(
         MapViewOfFileEx(hMap, FILE_MAP_COPY, offsetH, offsetL, alignedLength,
                         reinterpret_cast<void*>(region)));
+#endif
 
     // Retry if another thread mapped the address we were trying to use.
     if (map || GetLastError() != ERROR_INVALID_ADDRESS) {
diff --git a/js/src/jit/ProcessExecutableMemory.cpp b/js/src/jit/ProcessExecutableMemory.cpp
index 6e0fac579..b31bd7afa 100644
--- a/js/src/jit/ProcessExecutableMemory.cpp
+++ b/js/src/jit/ProcessExecutableMemory.cpp
@@ -146,6 +146,7 @@ PRUNTIME_FUNCTION RuntimeFunctionCallback(DWORD64 ControlPc, PVOID Context);
 // For an explanation of the problem being solved here, see
 // SetJitExceptionFilter in jsfriendapi.h.
 static bool RegisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
+#ifndef JS_ENABLE_UWP
   if (!VirtualAlloc(p, pageSize, MEM_COMMIT, PAGE_READWRITE)) {
     MOZ_CRASH();
   }
@@ -233,6 +234,9 @@ static bool RegisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
   AutoSuppressStackWalking suppress;
   return RtlInstallFunctionTableCallback((DWORD64)p | 0x3, (DWORD64)p, bytes,
                                          RuntimeFunctionCallback, NULL, NULL);
+#else
+  return false;
+#endif
 }
 
 static void UnregisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
@@ -252,7 +256,11 @@ static void* ReserveProcessExecutableMemory(size_t bytes) {
   void* p = nullptr;
   for (size_t i = 0; i < 10; i++) {
     void* randomAddr = ComputeRandomAllocationAddress();
+#ifdef JS_ENABLE_UWP
+    p = VirtualAllocFromApp(randomAddr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#else
     p = VirtualAlloc(randomAddr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#endif
     if (p) {
       break;
     }
@@ -260,7 +268,11 @@ static void* ReserveProcessExecutableMemory(size_t bytes) {
 
   if (!p) {
     // Try again without randomization.
+#ifdef JS_ENABLE_UWP
+    p = VirtualAllocFromApp(nullptr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#else
     p = VirtualAlloc(nullptr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#endif
     if (!p) {
       return nullptr;
     }
@@ -311,8 +323,17 @@ static DWORD ProtectionSettingToFlags(ProtectionSetting protection) {
 
 [[nodiscard]] static bool CommitPages(void* addr, size_t bytes,
                                       ProtectionSetting protection) {
+#ifdef JS_ENABLE_UWP
+  void* p = VirtualAllocFromApp(addr, bytes, MEM_COMMIT, PAGE_READWRITE);
+  if (p) {
+    ULONG oldProt;
+    bool r = VirtualProtectFromApp(addr, bytes, ProtectionSettingToFlags(protection), &oldProt);
+    MOZ_RELEASE_ASSERT(r);
+  }
+#else
   void* p = VirtualAlloc(addr, bytes, MEM_COMMIT,
                          ProtectionSettingToFlags(protection));
+#endif
   if (!p) {
     return false;
   }
diff --git a/js/src/js-config.h.in b/js/src/js-config.h.in
index 61b51c9c3..df04275f5 100644
--- a/js/src/js-config.h.in
+++ b/js/src/js-config.h.in
@@ -61,6 +61,9 @@
 /* Define to 1 if SpiderMonkey is in PUNBOX64 mode. */
 #undef JS_PUNBOX64
 
+/* Define to 1 if SpiderMonkey is built in a UWP environment. */
+#undef JS_ENABLE_UWP
+
 /* Define to 1 if SpiderMonkey should support SmooshMonkey parser. */
 #undef JS_ENABLE_SMOOSH

diff --git a/js/src/old-configure b/js/src/old-configure
index 20edd22ae..3ddca5ebb 100644
--- a/js/src/old-configure
+++ b/js/src/old-configure
@@ -1979,8 +1979,8 @@ fi
 
 
 
-# Target the Windows 8.1 SDK by default
-WINVER=601
+# Target the Windows 10 SDK by default
+WINVER=A00
 
 case "$target" in
 *-mingw*)
diff --git a/js/src/old-configure.in b/js/src/old-configure.in
index bf7e10ec8..e20bb5b6d 100644
--- a/js/src/old-configure.in
+++ b/js/src/old-configure.in
@@ -100,8 +100,8 @@ MOZ_TOOL_VARIABLES
 dnl Special win32 checks
 dnl ========================================================
 
-# Target the Windows 8.1 SDK by default
-WINVER=601
+# Target the Windows 10 SDK by default
+WINVER=A00
 
 case "$target" in
 *-mingw*)
diff --git a/js/src/util/GetPidProvider.h b/js/src/util/GetPidProvider.h
index 39af4dd4c..7f753a1c7 100644
--- a/js/src/util/GetPidProvider.h
+++ b/js/src/util/GetPidProvider.h
@@ -9,7 +9,12 @@
 
 #ifdef XP_WIN
 #  include <process.h>
+#  include <windows.h>
+#ifndef JS_ENABLE_UWP
 #  define getpid _getpid
+#else
+#  define getpid GetCurrentProcessId
+#endif
 #elif defined(__wasi__)
 #  define getpid() 1
 #else

diff --git a/js/src/vm/Time.cpp b/js/src/vm/Time.cpp
index 059710064..6ffc8e55c 100644
--- a/js/src/vm/Time.cpp
+++ b/js/src/vm/Time.cpp
@@ -21,6 +21,9 @@
 #include "jstypes.h"
 
 #ifdef XP_WIN
+#ifdef JS_ENABLE_UWP
+#  include <windows.h>
+#endif
 #  include <windef.h>
 #  include <winbase.h>
 #  include <crtdbg.h>   /* for _CrtSetReportMode */
@@ -99,13 +102,17 @@ static void NowCalibrate() {
 
   // By wrapping a timeBegin/EndPeriod pair of calls around this loop,
   // the loop seems to take much less time (1 ms vs 15ms) on Vista.
+#ifndef JS_ENABLE_UWP
   timeBeginPeriod(1);
+#endif
   FILETIME ft, ftStart;
   GetSystemTimeAsFileTime(&ftStart);
   do {
     GetSystemTimeAsFileTime(&ft);
   } while (memcmp(&ftStart, &ft, sizeof(ft)) == 0);
+#ifndef JS_ENABLE_UWP
   timeEndPeriod(1);
+#endif
 
   LARGE_INTEGER now;
   QueryPerformanceCounter(&now);
@@ -135,11 +142,15 @@ void PRMJ_NowInit() {
   InitializeCriticalSectionAndSpinCount(&calibration.data_lock,
                                         DataLockSpinCount);
 
+#ifndef JS_ENABLE_UWP
   // Windows 8 has a new API function we can use.
   if (HMODULE h = GetModuleHandle("kernel32.dll")) {
     pGetSystemTimePreciseAsFileTime = (void(WINAPI*)(LPFILETIME))GetProcAddress(
         h, "GetSystemTimePreciseAsFileTime");
   }
+#else
+    pGetSystemTimePreciseAsFileTime = &GetSystemTimeAsFileTime;
+#endif
 }
 
 void PRMJ_NowShutdown() { DeleteCriticalSection(&calibration.data_lock); }
diff --git a/js/src/wasm/WasmSignalHandlers.cpp b/js/src/wasm/WasmSignalHandlers.cpp
index 4b3946da3..c4f0b3576 100644
--- a/js/src/wasm/WasmSignalHandlers.cpp
+++ b/js/src/wasm/WasmSignalHandlers.cpp
@@ -644,6 +644,7 @@ struct AutoHandlingTrap {
 // Compiled in all user binaries, so should be stable over time.
 static const unsigned sThreadLocalArrayPointerIndex = 11;
 
+#ifndef JS_ENABLE_UWP
 static LONG WINAPI WasmTrapHandler(LPEXCEPTION_POINTERS exception) {
   // Make sure TLS is initialized before reading sAlreadyHandlingTrap.
   if (!NtCurrentTeb()->Reserved1[sThreadLocalArrayPointerIndex]) {
@@ -668,6 +669,7 @@ static LONG WINAPI WasmTrapHandler(LPEXCEPTION_POINTERS exception) {
 
   return EXCEPTION_CONTINUE_EXECUTION;
 }
+#endif
 
 #  elif defined(XP_DARWIN)
 // On OSX we are forced to use the lower-level Mach exception mechanism instead
@@ -932,11 +934,13 @@ void wasm::EnsureEagerProcessSignalHandlers() {
   // such as MemoryProtectionExceptionHandler that assume we are crashing.
   const bool firstHandler = true;
 #    endif
+#  ifndef JS_ENABLE_UWP
   if (!AddVectoredExceptionHandler(firstHandler, WasmTrapHandler)) {
     // Windows has all sorts of random security knobs for disabling things
     // so make this a dynamic failure that disables wasm, not a MOZ_CRASH().
     return;
   }
+#  endif
 
 #  elif defined(XP_DARWIN)
   // All the Mach setup in EnsureLazyProcessSignalHandlers.
diff --git a/mfbt/Poison.cpp b/mfbt/Poison.cpp
index db523b928..cbcfd67d8 100644
--- a/mfbt/Poison.cpp
+++ b/mfbt/Poison.cpp
@@ -14,6 +14,9 @@
 #include "mozilla/Assertions.h"
 #ifdef _WIN32
 #  include <windows.h>
+#  ifdef JS_ENABLE_UWP
+#    include <memoryapi.h>
+#  endif
 #elif !defined(__OS2__)
 #  include <unistd.h>
 #  ifndef __wasi__
@@ -38,7 +41,11 @@
 
 #ifdef _WIN32
 static void* ReserveRegion(uintptr_t aRegion, uintptr_t aSize) {
+#ifdef JS_ENABLE_UWP
+  return VirtualAllocFromApp((void*)aRegion, aSize, MEM_RESERVE, PAGE_NOACCESS);
+#else
   return VirtualAlloc((void*)aRegion, aSize, MEM_RESERVE, PAGE_NOACCESS);
+#endif
 }
 
 static void ReleaseRegion(void* aRegion, uintptr_t aSize) {
diff --git a/mfbt/RandomNum.cpp b/mfbt/RandomNum.cpp
index 23381db0c..455cff0a3 100644
--- a/mfbt/RandomNum.cpp
+++ b/mfbt/RandomNum.cpp
@@ -13,6 +13,7 @@
 
 #if defined(XP_WIN)
 
+#ifndef JS_ENABLE_UWP
 // Microsoft doesn't "officially" support using RtlGenRandom() directly
 // anymore, and the Windows headers assume that __stdcall is
 // the default calling convention (which is true when Microsoft uses this
@@ -25,6 +26,10 @@
 extern "C" BOOLEAN NTAPI RtlGenRandom(PVOID RandomBuffer,
                                       ULONG RandomBufferLength);
 
+#else
+#  include "bcrypt.h"
+#  include "ntstatus.h"
+#endif // JS_ENABLE_UWP
 #endif
 
 #if defined(ANDROID) || defined(XP_DARWIN) || defined(__DragonFly__) || \

diff --git a/mfbt/WindowsVersion.h b/mfbt/WindowsVersion.h
index 502015382..085d1dbc9 100644
--- a/mfbt/WindowsVersion.h
+++ b/mfbt/WindowsVersion.h
@@ -7,6 +7,8 @@
 #ifndef mozilla_WindowsVersion_h
 #define mozilla_WindowsVersion_h
 
+#ifndef JS_ENABLE_UWP
+
 #include "mozilla/Atomics.h"
 #include "mozilla/Attributes.h"
 #include <stdint.h>
@@ -202,4 +204,6 @@ inline bool IsWin7AndPre2000Compatible() {
 
 }  // namespace mozilla
 
+#endif
+
 #endif /* mozilla_WindowsVersion_h */
diff --git a/mozglue/misc/DynamicallyLinkedFunctionPtr.h b/mozglue/misc/DynamicallyLinkedFunctionPtr.h
index 4313974ec..7b6cb4219 100644
--- a/mozglue/misc/DynamicallyLinkedFunctionPtr.h
+++ b/mozglue/misc/DynamicallyLinkedFunctionPtr.h
@@ -47,7 +47,11 @@ class DynamicallyLinkedFunctionPtrBase {
 
   DynamicallyLinkedFunctionPtrBase(const wchar_t* aLibName,
                                    const char* aFuncName)
+#ifndef JS_ENABLE_UWP
       : mModule(::LoadLibraryW(aLibName)), mFunction(nullptr) {
+#else
+      : mModule(nullptr), mFunction(nullptr) {
+#endif
     if (!mModule) {
       return;
     }
diff --git a/mozglue/misc/StackWalk.cpp b/mozglue/misc/StackWalk.cpp
index 1dd7a56f6..7ab6af930 100644
--- a/mozglue/misc/StackWalk.cpp
+++ b/mozglue/misc/StackWalk.cpp
@@ -104,9 +104,11 @@ class FrameSkipper {
 // We need a way to know if we are building for WXP (or later), as if we are, we
 // need to use the newer 64-bit APIs. API_VERSION_NUMBER seems to fit the bill.
 // A value of 9 indicates we want to use the new APIs.
+#ifndef JS_ENABLE_UWP
 #  if API_VERSION_NUMBER < 9
 #    error Too old imagehlp.h
 #  endif
+#endif
 
 CRITICAL_SECTION gDbgHelpCS;
 
@@ -439,6 +441,7 @@ static BOOL CALLBACK callbackEspecial64(PCSTR aModuleName, DWORD64 aModuleBase,
   BOOL retval = TRUE;
   DWORD64 addr = *(DWORD64*)aUserContext;
 
+#ifndef JS_ENABLE_UWP
   /*
    * You'll want to control this if we are running on an
    *  architecture where the addresses go the other direction.
@@ -459,6 +462,7 @@ static BOOL CALLBACK callbackEspecial64(PCSTR aModuleName, DWORD64 aModuleBase,
     }
   }
 
+#endif
   return retval;
 }
 
@@ -490,6 +494,7 @@ static BOOL CALLBACK callbackEspecial64(PCSTR aModuleName, DWORD64 aModuleBase,
 #    define NS_IMAGEHLP_MODULE64_SIZE sizeof(IMAGEHLP_MODULE64)
 #  endif
 
+#ifndef JS_ENABLE_UWP
 BOOL SymGetModuleInfoEspecial64(HANDLE aProcess, DWORD64 aAddr,
                                 PIMAGEHLP_MODULE64 aModuleInfo,
                                 PIMAGEHLP_LINE64 aLineInfo) {
@@ -546,10 +551,11 @@ BOOL SymGetModuleInfoEspecial64(HANDLE aProcess, DWORD64 aAddr,
 
   return retval;
 }
+#endif
 
 static bool EnsureSymInitialized() {
   static bool gInitialized = false;
-  bool retStat;
+  bool retStat = true;
 
   if (gInitialized) {
     return gInitialized;
@@ -557,11 +563,13 @@ static bool EnsureSymInitialized() {
 
   InitializeDbgHelpCriticalSection();
 
+#ifndef JS_ENABLE_UWP
   SymSetOptions(SYMOPT_LOAD_LINES | SYMOPT_UNDNAME);
   retStat = SymInitialize(GetCurrentProcess(), nullptr, TRUE);
   if (!retStat) {
     PrintError("SymInitialize");
   }
+#endif
 
   gInitialized = retStat;
   /* XXX At some point we need to arrange to call SymCleanup */
@@ -569,6 +577,7 @@ static bool EnsureSymInitialized() {
   return retStat;
 }
 
+#ifndef JS_ENABLE_UWP
 MFBT_API bool MozDescribeCodeAddress(void* aPC,
                                      MozCodeAddressDetails* aDetails) {
   aDetails->library[0] = '\0';
@@ -632,6 +641,7 @@ MFBT_API bool MozDescribeCodeAddress(void* aPC,
   LeaveCriticalSection(&gDbgHelpCS);  // release our lock
   return true;
 }
+#endif
 
 // i386 or PPC Linux stackwalking code
 #elif HAVE_DLADDR &&                                           \
diff --git a/mozglue/misc/TimeStamp_windows.cpp b/mozglue/misc/TimeStamp_windows.cpp
index e4739ced2..40d04afaf 100644
--- a/mozglue/misc/TimeStamp_windows.cpp
+++ b/mozglue/misc/TimeStamp_windows.cpp
@@ -172,8 +172,10 @@ static inline ULONGLONG PerformanceCounter() {
 static void InitThresholds() {
   DWORD timeAdjustment = 0, timeIncrement = 0;
   BOOL timeAdjustmentDisabled;
+#ifndef JS_ENABLE_UWP
   GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
                           &timeAdjustmentDisabled);
+#endif
 
   LOG(("TimeStamp: timeIncrement=%d [100ns]", timeIncrement));
 
diff --git a/mozglue/misc/WindowsMapRemoteView.cpp b/mozglue/misc/WindowsMapRemoteView.cpp
index 4cd60ba7f..8e67c4ef8 100644
--- a/mozglue/misc/WindowsMapRemoteView.cpp
+++ b/mozglue/misc/WindowsMapRemoteView.cpp
@@ -29,6 +29,7 @@ WINBASEAPI BOOL WINAPI UnmapViewOfFile2(HANDLE aProcess, PVOID aBaseAddress,
 
 enum SECTION_INHERIT { ViewShare = 1, ViewUnmap = 2 };
 
+#ifndef JS_ENABLE_UWP
 NTSTATUS NTAPI NtMapViewOfSection(
     HANDLE aSection, HANDLE aProcess, PVOID* aBaseAddress, ULONG_PTR aZeroBits,
     SIZE_T aCommitSize, PLARGE_INTEGER aSectionOffset, PSIZE_T aViewSize,
@@ -49,6 +50,7 @@ static DWORD GetWin32ErrorCode(NTSTATUS aNtStatus) {
 
   return pRtlNtStatusToDosError(aNtStatus);
 }
+#endif
 
 namespace mozilla {
 
@@ -56,6 +58,9 @@ MFBT_API void* MapRemoteViewOfFile(HANDLE aFileMapping, HANDLE aProcess,
                                    ULONG64 aOffset, PVOID aBaseAddress,
                                    SIZE_T aViewSize, ULONG aAllocationType,
                                    ULONG aProtectionFlags) {
+#ifdef JS_ENABLE_UWP
+  return false;
+#else
   static const StaticDynamicallyLinkedFunctionPtr<decltype(&MapViewOfFileNuma2)>
       pMapViewOfFileNuma2(L"Api-ms-win-core-memory-l1-1-5.dll",
                           "MapViewOfFileNuma2");
@@ -96,10 +101,14 @@ MFBT_API void* MapRemoteViewOfFile(HANDLE aFileMapping, HANDLE aProcess,
   }
 
   ::SetLastError(GetWin32ErrorCode(ntStatus));
+#endif
   return nullptr;
 }
 
 MFBT_API bool UnmapRemoteViewOfFile(HANDLE aProcess, PVOID aBaseAddress) {
+#ifdef JS_ENABLE_UWP
+  return false;
+#else
   static const StaticDynamicallyLinkedFunctionPtr<decltype(&UnmapViewOfFile2)>
       pUnmapViewOfFile2(L"kernel32.dll", "UnmapViewOfFile2");
 
@@ -119,6 +128,7 @@ MFBT_API bool UnmapRemoteViewOfFile(HANDLE aProcess, PVOID aBaseAddress) {
   NTSTATUS ntStatus = pNtUnmapViewOfSection(aProcess, aBaseAddress);
   ::SetLastError(GetWin32ErrorCode(ntStatus));
   return NT_SUCCESS(ntStatus);
+#endif
 }
 
 }  // namespace mozilla
diff --git a/mozglue/misc/WindowsUnicode.cpp b/mozglue/misc/WindowsUnicode.cpp
index 464380b6d..a84e2860e 100644
--- a/mozglue/misc/WindowsUnicode.cpp
+++ b/mozglue/misc/WindowsUnicode.cpp
@@ -7,14 +7,17 @@
 #include "WindowsUnicode.h"
 
 #include <windows.h>
+#ifndef JS_ENABLE_UWP
 // For UNICODE_STRING
 #include <winternl.h>
+#endif
 
 #include <string.h>
 
 namespace mozilla {
 namespace glue {
 
+#ifndef JS_ENABLE_UWP
 mozilla::UniquePtr<char[]> WideToUTF8(const wchar_t* aStr,
                                       const size_t aStrLenExclNul) {
   int numConv = ::WideCharToMultiByte(CP_UTF8, 0, aStr, aStrLenExclNul, nullptr,
@@ -38,6 +41,7 @@ mozilla::UniquePtr<char[]> WideToUTF8(const wchar_t* aStr,
 
   return buf;
 }
+#endif
 
 mozilla::UniquePtr<char[]> WideToUTF8(const wchar_t* aStr) {
   return WideToUTF8(aStr, wcslen(aStr));
@@ -47,6 +51,7 @@ mozilla::UniquePtr<char[]> WideToUTF8(const std::wstring& aStr) {
   return WideToUTF8(aStr.data(), aStr.length());
 }
 
+#ifndef JS_ENABLE_UWP
 mozilla::UniquePtr<char[]> WideToUTF8(PCUNICODE_STRING aStr) {
   if (!aStr) {
     return nullptr;
@@ -54,6 +59,7 @@ mozilla::UniquePtr<char[]> WideToUTF8(PCUNICODE_STRING aStr) {
 
   return WideToUTF8(aStr->Buffer, aStr->Length / sizeof(WCHAR));
 }
+#endif
 
 }  // namespace glue
 }  // namespace mozilla

diff --git a/mozglue/misc/WindowsUnicode.h b/mozglue/misc/WindowsUnicode.h
index 77fc376b9..dcf793839 100644
--- a/mozglue/misc/WindowsUnicode.h
+++ b/mozglue/misc/WindowsUnicode.h
@@ -11,7 +11,9 @@
 
 #include <string>
 
+#ifndef JS_ENABLE_UWP
 struct _UNICODE_STRING;
+#endif
 
 namespace mozilla {
 namespace glue {
@@ -21,7 +23,9 @@ mozilla::UniquePtr<char[]> WideToUTF8(const wchar_t* aStr,
 
 mozilla::UniquePtr<char[]> WideToUTF8(const wchar_t* aStr);
 mozilla::UniquePtr<char[]> WideToUTF8(const std::wstring& aStr);
+#ifndef JS_ENABLE_UWP
 mozilla::UniquePtr<char[]> WideToUTF8(const _UNICODE_STRING* aStr);
+#endif
 
 #if defined(bstr_t)
 inline mozilla::UniquePtr<char[]> WideToUTF8(const _bstr_t& aStr) {
