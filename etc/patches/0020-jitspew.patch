diff --git a/js/src/jit/AliasAnalysis.cpp b/js/src/jit/AliasAnalysis.cpp
index 4fbca27fa..d61b97916 100644
--- a/js/src/jit/AliasAnalysis.cpp
+++ b/js/src/jit/AliasAnalysis.cpp
@@ -48,7 +48,7 @@ class LoopAliasInfo : public TempObject {
 void AliasAnalysis::spewDependencyList() {
 #ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_AliasSummaries)) {
-    Fprinter& print = JitSpewPrinter();
+    GenericPrinter& print = JitSpewPrinter();
     JitSpewHeader(JitSpew_AliasSummaries);
     print.printf("Dependency list for other passes:\n");
 
@@ -110,7 +110,7 @@ static void IonSpewDependency(MInstruction* load, MInstruction* store,
   }

   JitSpewHeader(JitSpew_Alias);
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("  Load ");
   load->printName(out);
   out.printf(" %s on store ", verb);
@@ -127,7 +127,7 @@ static void IonSpewAliasInfo(const char* pre, MInstruction* ins,
   }
 
   JitSpewHeader(JitSpew_Alias);
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("  %s ", pre);
   ins->printName(out);
   out.printf(" %s\n", post);
@@ -217,7 +217,7 @@ bool AliasAnalysis::analyze() {
 #ifdef JS_JITSPEW
         if (JitSpewEnabled(JitSpew_Alias)) {
           JitSpewHeader(JitSpew_Alias);
-          Fprinter& out = JitSpewPrinter();
+          GenericPrinter& out = JitSpewPrinter();
           out.printf("Processing store ");
           def->printName(out);
           out.printf(" (flags %x)\n", set.flags());
diff --git a/js/src/jit/IonAnalysis.cpp b/js/src/jit/IonAnalysis.cpp
index 199c7f99c..0ce9e9e19 100644
--- a/js/src/jit/IonAnalysis.cpp
+++ b/js/src/jit/IonAnalysis.cpp
@@ -4316,7 +4316,7 @@ void jit::DumpMIRExpressions(MIRGraph& graph, const CompileInfo& info,
     return;
   }

-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("===== %s =====\n", phase);
 
   size_t depth = 2;
diff --git a/js/src/jit/JitSpewer.cpp b/js/src/jit/JitSpewer.cpp
index 4fcf78b05..2f947ae1b 100644
--- a/js/src/jit/JitSpewer.cpp
+++ b/js/src/jit/JitSpewer.cpp
@@ -336,8 +343,12 @@ AutoSpewEndFunction::~AutoSpewEndFunction() {
   mir_->graphSpewer().endFunction();
 }
 
-Fprinter& jit::JitSpewPrinter() {
+GenericPrinter& jit::JitSpewPrinter() {
+#ifdef JS_ENABLE_UWP
+  static UWPPrinter out;
+#else
   static Fprinter out;
+#endif
   return out;
 }
 
@@ -408,10 +419,18 @@ void jit::CheckLogging() {
 
   LoggingChecked = true;
 
+#ifdef JS_ENABLE_UWP
+  wchar_t wideEnvBuf[1024] = { 0 };
+  GetEnvironmentVariable(L"IONFLAGS", wideEnvBuf, sizeof(wideEnvBuf));
+  char envBuf[1024] = { 0 };
+  wcstombs(envBuf, wideEnvBuf, sizeof(envBuf));
+  char* env = &envBuf[0];
+#else
   char* env = getenv("IONFLAGS");
   if (!env) {
     return;
   }
+#endif
 
   const char* found = strtok(env, ",");
   while (found) {
@@ -518,6 +537,7 @@ void jit::CheckLogging() {
     found = strtok(nullptr, ",");
   }
 
+#ifndef JS_ENABLE_UWP
   FILE* spewfh = stderr;
   const char* filename = getenv("ION_SPEW_FILENAME");
   if (filename && *filename) {
@@ -527,7 +547,8 @@ void jit::CheckLogging() {
     MOZ_RELEASE_ASSERT(spewfh);
     setbuf(spewfh, nullptr);  // Make unbuffered
   }
-  JitSpewPrinter().init(spewfh);
+  ((Fprinter&)JitSpewPrinter()).init(spewfh);
+#endif
 }
 
 JitSpewIndent::JitSpewIndent(JitSpewChannel channel) : channel_(channel) {
@@ -542,7 +563,7 @@ void jit::JitSpewStartVA(JitSpewChannel channel, const char* fmt, va_list ap) {
   }
 
   JitSpewHeader(channel);
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.vprintf(fmt, ap);
 }
 
@@ -551,7 +572,7 @@ void jit::JitSpewContVA(JitSpewChannel channel, const char* fmt, va_list ap) {
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.vprintf(fmt, ap);
 }
 
@@ -560,7 +581,7 @@ void jit::JitSpewFin(JitSpewChannel channel) {
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.put("\n");
 }
 
@@ -583,7 +604,7 @@ void jit::JitSpewDef(JitSpewChannel channel, const char* str,
   }
 
   JitSpewHeader(channel);
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.put(str);
   def->dump(out);
   def->dumpLocation(out);
@@ -607,7 +628,7 @@ void jit::JitSpewHeader(JitSpewChannel channel) {
     return;
   }
 
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("[%s] ", ChannelNames[channel]);
   for (size_t i = ChannelIndentLevel[channel]; i != 0; i--) {
     out.put("  ");
diff --git a/js/src/jit/JitSpewer.h b/js/src/jit/JitSpewer.h
index fa042575c..f5998b7ec 100644
--- a/js/src/jit/JitSpewer.h
+++ b/js/src/jit/JitSpewer.h
@@ -162,7 +162,7 @@ class AutoSpewEndFunction {
 };
 
 void CheckLogging();
-Fprinter& JitSpewPrinter();
+GenericPrinter& JitSpewPrinter();
 
 class JitSpewIndent {
   JitSpewChannel channel_;
diff --git a/js/src/jit/LIR.cpp b/js/src/jit/LIR.cpp
index a9fd9d316..adc385f16 100644
--- a/js/src/jit/LIR.cpp
+++ b/js/src/jit/LIR.cpp
@@ -504,7 +504,7 @@ void LInstruction::assignSnapshot(LSnapshot* snapshot) {
 #ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_IonSnapshots)) {
     JitSpewHeader(JitSpew_IonSnapshots);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf("Assigning snapshot %p to instruction %p (", (void*)snapshot,
                (void*)this);
     printName(out);
diff --git a/js/src/jit/Lowering.cpp b/js/src/jit/Lowering.cpp
index 21f31e06f..477967c58 100644
--- a/js/src/jit/Lowering.cpp
+++ b/js/src/jit/Lowering.cpp
@@ -5407,7 +5407,7 @@ void LIRGenerator::visitWasmFloatConstant(MWasmFloatConstant* ins) {
 #ifdef JS_JITSPEW
 static void SpewResumePoint(MBasicBlock* block, MInstruction* ins,
                             MResumePoint* resumePoint) {
-  Fprinter& out = JitSpewPrinter();
+  GenericPrinter& out = JitSpewPrinter();
   out.printf("Current resume point %p details:\n", (void*)resumePoint);
   out.printf("    frame count: %u\n", resumePoint->frameCount());
 
diff --git a/js/src/jit/RangeAnalysis.cpp b/js/src/jit/RangeAnalysis.cpp
index 299463372..8b9956f64 100644
--- a/js/src/jit/RangeAnalysis.cpp
+++ b/js/src/jit/RangeAnalysis.cpp
@@ -123,7 +123,7 @@ static inline void SpewRange(MDefinition* def) {
   if (JitSpewEnabled(JitSpew_Range) && def->type() != MIRType::None &&
       def->range()) {
     JitSpewHeader(JitSpew_Range);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf("  ");
     def->printName(out);
     out.printf(" has range ");
@@ -153,7 +153,7 @@ static inline void SpewTruncate(MDefinition* def, TruncateKind kind,
                                 bool shouldClone) {
   if (JitSpewEnabled(JitSpew_Range)) {
     JitSpewHeader(JitSpew_Range);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf("  ");
     out.printf("truncating ");
     def->printName(out);
@@ -341,7 +341,7 @@ bool RangeAnalysis::addBetaNodes() {
 
     if (JitSpewEnabled(JitSpew_Range)) {
       JitSpewHeader(JitSpew_Range);
-      Fprinter& out = JitSpewPrinter();
+      GenericPrinter& out = JitSpewPrinter();
       out.printf("  Adding beta node for %u with range ", val->id());
       comp.dump(out);
       out.printf("\n");
diff --git a/js/src/jit/Snapshots.cpp b/js/src/jit/Snapshots.cpp
index 2c37328f6..fcc455c04 100644
--- a/js/src/jit/Snapshots.cpp
+++ b/js/src/jit/Snapshots.cpp
@@ -446,7 +446,7 @@ void SnapshotReader::spewBailingFrom() const {
 #  ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_IonBailouts)) {
     JitSpewHeader(JitSpew_IonBailouts);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf(" bailing from bytecode: %s, MIR: ", CodeName(JSOp(pcOpcode_)));
     MDefinition::PrintOpcodeName(out, MDefinition::Opcode(mirOpcode_));
     out.printf(" [%u], LIR: ", mirId_);
@@ -577,7 +577,7 @@ bool SnapshotWriter::add(const RValueAllocation& alloc) {
 #ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_IonSnapshots)) {
     JitSpewHeader(JitSpew_IonSnapshots);
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     out.printf("    slot %u (%u): ", allocWritten_, offset);
     alloc.dump(out);
     out.printf("\n");
diff --git a/js/src/util/StructuredSpewer.h b/js/src/util/StructuredSpewer.h
index 5d300a1fe..a3be18be4 100644
--- a/js/src/util/StructuredSpewer.h
+++ b/js/src/util/StructuredSpewer.h
@@ -21,8 +21,13 @@
 #  include "vm/Printer.h"
 
 #  ifdef XP_WIN
-#    include <process.h>
-#    define getpid _getpid
+#    ifdef JS_ENABLE_UWP
+#      include <processthreadsapi.h>
+#      define getpid GetCurrentProcessId
+#    else
+#      include <process.h>
+#      define getpid _getpid
+#    endif
 #  else
 #    include <unistd.h>
 #  endif
diff --git a/js/src/vm/Printer.cpp b/js/src/vm/Printer.cpp
index 427fd62e6..8438deeb7 100644
--- a/js/src/vm/Printer.cpp
+++ b/js/src/vm/Printer.cpp
@@ -571,4 +571,21 @@ bool LSprinter::put(const char* s, size_t len) {
   return true;
 }
 
+#ifdef JS_ENABLE_UWP
+bool UWPPrinter::put(const char* s, size_t len)
+{
+    const char* end = (const char*)memchr(s, '\n', len);
+    if (end) {
+        if (!buffer_.append(s, end - s + 1) || !buffer_.append(0)) {
+            return false;
+        }
+        OutputDebugStringA((const char*)buffer_.begin());
+        buffer_.clear();
+    } else {
+        end = s + len;
+    }
+    return buffer_.append(s, end - s);
+}
+#endif
+
 }  // namespace js
diff --git a/js/src/vm/Printer.h b/js/src/vm/Printer.h
index d2838766a..e751c7db8 100644
--- a/js/src/vm/Printer.h
+++ b/js/src/vm/Printer.h
@@ -9,6 +9,7 @@
 
 #include "mozilla/Attributes.h"
 #include "mozilla/Range.h"
+#include "mozilla/Vector.h"
 
 #include <stdarg.h>
 #include <stddef.h>
@@ -131,6 +132,18 @@ class Sprinter final : public GenericPrinter {
   virtual void reportOutOfMemory() override;
 };
 
+#ifdef JS_ENABLE_UWP
+class UWPPrinter : public GenericPrinter {
+   mozilla::Vector<uint8_t> buffer_;
+ public:
+   explicit UWPPrinter() {}
+  // Puts |len| characters from |s| at the current position and
+  // return true on success, false on failure.
+  virtual bool put(const char* s, size_t len) override;
+  using GenericPrinter::put;  // pick up |inline bool put(const char* s);|
+};
+#endif
+
 // Fprinter, print a string directly into a file.
 class Fprinter final : public GenericPrinter {
  private:
diff --git a/js/src/jit/WarpOracle.cpp b/js/src/jit/WarpOracle.cpp
index 51e40687b..2b3119e9b 100644
--- a/js/src/jit/WarpOracle.cpp
+++ b/js/src/jit/WarpOracle.cpp
@@ -165,7 +165,7 @@ AbortReasonOr<WarpSnapshot*> WarpOracle::createSnapshot() {
 
 #ifdef JS_JITSPEW
   if (JitSpewEnabled(JitSpew_WarpSnapshots)) {
-    Fprinter& out = JitSpewPrinter();
+    GenericPrinter& out = JitSpewPrinter();
     snapshot->dump(out);
   }
 #endif
diff --git a/js/src/wasm/WasmGenerator.cpp b/js/src/wasm/WasmGenerator.cpp
index 6cc0b6098..61b510151 100644
--- a/js/src/wasm/WasmGenerator.cpp
+++ b/js/src/wasm/WasmGenerator.cpp
@@ -40,6 +40,8 @@
 #include "wasm/WasmIonCompile.h"
 #include "wasm/WasmStubs.h"
 
+#undef far
+
 using namespace js;
 using namespace js::jit;
 using namespace js::wasm;
