# We need to use bash here, as there are a couple of targets below
# that use [[ to do conditional things
SHELL := bash

# Default flags
CONFIGURE_FLAGS := \
	--disable-jemalloc \
	--disable-js-shell \
	--disable-tests \
	--disable-export-js \
	--disable-shared-js \
	--build-backends=RecursiveMake \
	--enable-js-streams

ifneq (,$(CARGO_FEATURE_JITSPEW))
    CONFIGURE_FLAGS += --enable-jitspew
endif

ifneq (,$(CARGO_FEATURE_DEBUGMOZJS))
	CONFIGURE_FLAGS += --enable-debug --disable-optimize --enable-gczeal
endif

ifneq (,$(CARGO_FEATURE_PROFILEMOZJS))
	CONFIGURE_FLAGS += --enable-profiling
endif

ifneq (,$(CCACHE))
	CONFIGURE_FLAGS += --with-ccache=$(CCACHE)
endif


ifneq (,$(MACOS_SDK_PATH))
	CONFIGURE_FLAGS += --with-macos-sdk=$(MACOS_SDK_PATH)
endif

ifeq (windows,$(findstring windows,$(TARGET)))
	WINDOWS := 1
	# Override any attempt to use the debug CRT when building with debug.
	CFLAGS += -MD
	CXXFLAGS += -MD
else
	WINDOWS :=
endif

ifneq ($(HOST),$(TARGET))

	ifeq (armv7-linux-androideabi,$(TARGET))
		# Reset TARGET variable because armv7 target name used by Rust is not 
		# the same as the target name needed for the CXX toolchain.
		TARGET = armv7a-linux-androideabi
		CONFIGURE_FLAGS += \
			--with-arch=armv7-a \
			--with-fpu=neon \
			$(NULL)
	endif

	ifeq (aarch64-unknown-linux-gnu,$(TARGET))
	        # Reset TARGET variable because aarch64 target name used by Rust is not 
		# the same as the target name needed for the CXX toolchain.
		TARGET = aarch64-linux-gnu
	endif

	ifeq (android,$(findstring android,$(TARGET)))
		# The target must be suffixed by the Android API level to avoid having
		# to define it in the compiler arguments.
		TARGET := $(TARGET)$(ANDROID_API_LEVEL)

		# STLPORT_CPPFLAGS and the toolchain directory are set here just to
		# make the SpiderMonkey build system happy. rust-mozjs patches have
		# disabled the actual use of these values, as the NDKs compiler should
		# take care of setting these flags internally.
		CONFIGURE_FLAGS += \
			--without-system-zlib \
			--with-android-ndk=$(ANDROID_NDK_HOME) \
			--with-android-platform="$(ANDROID_NDK_HOME)/sysroot" \
			--with-android-version=$(ANDROID_API_LEVEL) \
			STLPORT_CPPFLAGS=" " \
			$(NULL)
	endif

	ifeq ($(WINDOWS),)
		CC ?= $(TARGET)-gcc
		CPP ?= $(TARGET)-gcc -E
		CXX ?= $(TARGET)-g++
		AR ?= $(TARGET)-ar
		CONFIGURE_FLAGS += --target=$(TARGET)
	endif

else

	ifeq (freebsd,$(findstring freebsd,$(TARGET)))
		# Does not symlink clang as "gcc" like macOS does
		CC ?= clang
		CPP ?= clang -E
		CXX ?= clang++
		AR ?= ar
	else ifeq (,$(WINDOWS))
		CC ?= cc
		CPP ?= cc -E
		CXX ?= c++
		AR ?= ar
	endif

endif

ifneq ($(WINDOWS),)

	ifeq ($(findstring x86_64,$(TARGET)),x86_64)
		# This is the correct target for MSVC builds
		CONFIGURE_FLAGS += --target=x86_64-pc-mingw32 --host=x86_64-pc-mingw32
	else ifeq ($(findstring i686,$(TARGET)),i686)
		# This is the correct target for MSVC builds
		CONFIGURE_FLAGS += --target=i686-pc-mingw32 --host=x86_64-pc-mingw32
	else ifeq ($(findstring aarch64,$(TARGET)),aarch64)
		# This is the correct target for MSVC builds
		CONFIGURE_FLAGS += --target=aarch64-windows-mingw32 --host=x86_64-pc-mingw32
	endif

	# There's no cygpath in mozilla-build, and we're expecting to
	# be building with MOZ_BUILD_TOOLS, so do our best
	OUT_DIR:=$(subst \,/,$(OUT_DIR))

else ifeq ($(MSYSTEM),MINGW64)

	# msys2 sets CC=cc as default. however, there is no `cc.exe`.
	# overwrite it here.
	ifeq ($(CC),cc)
		CC = gcc
		CPP = gcc -E
	endif

	# cargo uses Windows native path. msys2 make unfortunately doesn't understand it.
	OUT_DIR:=$(shell cygpath "$(OUT_DIR)")

endif

.PHONY : all maybe-configure

all: maybe-configure
	$(MAKE) -f Makefile

# Only touch and run configure if we need to, to avoid unnecessary rebuilds.
# The second two time checks handle the case of configure.in and configure having
# the same timestamp (e.g. after a git checkout)
JSSRC := '$(SRC_DIR)'/js/src
maybe-configure:
	[[ $(JSSRC)/configure -ot $(JSSRC)/configure.in ]] && touch $(JSSRC)/configure || true
	[[ $(JSSRC)/old-configure -ot $(JSSRC)/old-configure.in ]] && touch $(JSSRC)/old-configure || true
	! [[ $(JSSRC)/configure.in -ot $(JSSRC)/configure ]] && touch $(JSSRC)/configure || true
	! [[ $(JSSRC)/old-configure.in -ot $(JSSRC)/old-configure ]] && touch $(JSSRC)/old-configure || true
	if [[ $(JSSRC)/configure -nt config.status ]] ; then \
	  CC="$(CC)" CFLAGS="$(CFLAGS)" \
	  CPP="$(CPP)" CPPFLAGS="$(CPPFLAGS)" \
	  CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" \
	  AS="$(AS)" AR="$(AR)" \
	  $(JSSRC)/configure $(strip $(CONFIGURE_FLAGS)) || (cat config.log && exit 1) ; \
	fi
