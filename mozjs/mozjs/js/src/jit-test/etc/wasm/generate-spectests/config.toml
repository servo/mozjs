# Standard 'directives.txt' prologues for jit-tests
harness_directive = "|jit-test| skip-if: true"
directive = "|jit-test| test-also=--wasm-compiler=optimizing; test-also=--wasm-compiler=baseline; test-also=--wasm-test-serialization; test-also=--test-wasm-await-tier2; test-also=--disable-wasm-huge-memory; skip-variant-if: --disable-wasm-huge-memory, !wasmHugeMemorySupported(); local-include:harness/harness.js"

# Failing tests across all testsuites
excluded_tests = [
  # false-positive windows-specific failures
  "align.wast",
  # bulk-memory-operations/issues/133 (data.wast:161)
  "data.wast",
  # memory limits can be encoded with more bytes now
  "binary.wast",
  "binary-leb128.wast",
  # testing that multiple tables fail (imports.wast:309)
  "imports.wast",
  # bulk-memory-operations/issues/133 (linking.wast:206)
  "linking.wast",
  # bulk-memory-operations/issues/133 (elem.wast:142)
  "elem.wast",
  # test harness doesn't acquire global values correctly
  "exports.wast",
  # false-positive windows-specific failure
  "memory_trap.wast",
  # false-positive error on invalid UTF-8 custom section name (utf8-custom-section-id.wast:6)
  "utf8-custom-section-id.wast",
  # invalid table maximum length for web embeddings
  "table.wast",
  # fails after a bottom-type has been added to validation
  "unreached-invalid.wast",
]

[[repos]]
name = "spec"
url = "https://github.com/WebAssembly/spec"
excluded_tests = []
directive = "; test-also=--no-avx; skip-variant-if: --no-avx, !getBuildConfiguration().x86 && !getBuildConfiguration().x64 || getBuildConfiguration().simulator"

[[repos]]
name = "threads"
url = "https://github.com/WebAssembly/threads"
branch = "main"
parent = "spec"
excluded_tests = [
  "atomic.wast",
  # testing that multi-value isn't implemented (func.wast:492)
  "func.wast",
  # testing that multi-value isn't implemented (type.wast:52)
  "type.wast"
]
# Skip in WPT where we can't guard on features being enabled
skip_wpt = true
# Skip in jit-test when it's not enabled
directive = "; skip-if: !wasmThreadsEnabled()"

[[repos]]
name = "exception-handling"
url = "https://github.com/WebAssembly/exception-handling"
branch = "main"
parent = "spec"
# Skip in jit-test when it's not enabled
directive = "; --wasm-exceptions; skip-if: !wasmExceptionsEnabled()"
excluded_tests = [
  # This gets included due to divergence between the proposal repo and the
  # upstream spec, it can be removed when the repo is rebased.
  "global.wast"
]

[[repos]]
name = "memory64"
url = "https://github.com/mozilla-spidermonkey/memory64"
branch = "test-cases"
directive = "; skip-if: !wasmMemory64Enabled()"
excluded_tests = []

[[repos]]
name = "function-references"
url = "https://github.com/WebAssembly/function-references"
branch = "main"
parent = "spec"
directive = "; --wasm-function-references; skip-if: !wasmFunctionReferencesEnabled()"
excluded_tests = [
  # return_call_ref not implemented
  "return_call_ref.wast",
  # table function elem subtyping
  "ref_is_null.wast",
  # cannot expose indexed reference type
  "ref_null.wast",
  # argument is not wasm value
  "select.wast",
  # parameter subtyping
  "type-equivalence.wast",
  # NYI WasmValType.h:259
  "table-sub.wast",
  # unrelated
  "tokens.wast",
]

[[repos]]
name = "relaxed-simd"
url = "https://github.com/WebAssembly/relaxed-simd"
branch = "main"
parent = "spec"
directive = "; --wasm-relaxed-simd; skip-if: !wasmRelaxedSimdEnabled()"
excluded_tests = [
  # Changed order of operands
  "relaxed_fma_fms.wast",
  # Different results
  "i32x4_relaxed_trunc.wast",
]
