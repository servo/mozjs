# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


@depends(build_project, "--enable-smoosh")
def cbindgen_is_needed(build_project, js_enable_smoosh):
    if build_project != "js":
        # cbindgen is needed by the style system build and webrender.
        return True

    # cbindgen is needed by SmooshMonkey.
    return js_enable_smoosh


option(env="CBINDGEN", nargs=1, when=cbindgen_is_needed, help="Path to cbindgen")


@imports(_from="textwrap", _import="dedent")
def check_cbindgen_version(cbindgen, fatal=False):
    log.debug("trying cbindgen: %s" % cbindgen)

    cbindgen_min_version = Version("0.19.0")

    # cbindgen x.y.z
    version = Version(check_cmd_output(cbindgen, "--version").strip().split(" ")[1])
    log.debug("%s has version %s" % (cbindgen, version))
    if version >= cbindgen_min_version:
        return True
    if not fatal:
        return False

    die(
        dedent(
            """\
    cbindgen version {} is too old. At least version {} is required.

    Please update using 'cargo install cbindgen --force' or running
    './mach bootstrap', after removing the existing executable located at
    {}.
    """.format(
                version, cbindgen_min_version, cbindgen
            )
        )
    )


# Similar behavior to what check_prog does.
has_cbindgen_input = depends("CBINDGEN", when=cbindgen_is_needed)(lambda x: x)
bootstrap_cbindgen = depends(cbindgen_is_needed, has_cbindgen_input)(
    lambda n, i: n and not i
)


@depends_if(
    "CBINDGEN",
    bootstrap_search_path("cbindgen", when=bootstrap_cbindgen),
    rust_search_path,
    when=cbindgen_is_needed,
)
@checking("for cbindgen")
@imports(_from="textwrap", _import="dedent")
def cbindgen(cbindgen_override, bootstrap_search_path, rust_search_path):
    if cbindgen_override:
        check_cbindgen_version(cbindgen_override[0], fatal=True)
        return cbindgen_override[0]

    candidates = []
    for path in bootstrap_search_path + rust_search_path:
        candidate = find_program("cbindgen", [path])
        if not candidate:
            continue
        if check_cbindgen_version(candidate):
            return candidate
        candidates.append(candidate)

    if not candidates:
        raise FatalCheckError(
            dedent(
                """\
        Cannot find cbindgen. Please run `mach bootstrap`,
        `cargo install cbindgen`, ensure that `cbindgen` is on your PATH,
        or point at an executable with `CBINDGEN`.
        """
            )
        )
    check_cbindgen_version(candidates[0], fatal=True)


set_config("CBINDGEN", cbindgen)

# Bindgen can use rustfmt to format Rust file, but it's not required.
option(env="RUSTFMT", nargs=1, help="Path to the rustfmt program")

rustfmt = check_prog(
    "RUSTFMT",
    ["rustfmt"],
    paths=rust_search_path,
    input="RUSTFMT",
    allow_missing=True,
)
